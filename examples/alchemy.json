{"openapi":"3.1.0","info":{"title":"ðŸ‘¤ Smart Wallets","version":"1.0"},"servers":[{"url":"https://api.g.alchemy.com/signer/v1"}],"security":[{"apiKey":[]}],"paths":{"/signup":{"post":{"summary":"Create Wallet","description":"Programmatically create a new wallet. A new Ethereum and Solana private key will be generated inside our non-custodial key management infrastructure. The wallet is secured by the userâ€™s authentication credentials.\n","tags":["Wallets API Endpoints"],"security":[{"apiKey":[]}],"x-readme":{"samples-languages":["javascript","curl","python","go"]},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"email":{"type":"string","description":"Optional. Used for user authentication when passkey is not provided. Specifies the user's email address.","required":false},"passkey":{"type":"object","description":"Optional. Used for authentication when email is not provided. Enables passkey-based authentication.","required":false,"properties":{"challenge":{"type":"string","description":"A challenge string for passkey authentication."},"attestation":{"type":"object","description":"Provides attestation details required for passkey authentication.","properties":{"credentialId":{"type":"string","description":"The credential ID used for attestation."},"clientDataJson":{"type":"string","description":"JSON data from the client used for attestation."},"attestationObject":{"type":"string","description":"The attestation object received during the authentication process."},"transports":{"type":"array","description":"Transport protocols used during attestation.","items":{"type":"string"}}}}}},"targetPublicKey":{"$ref":"#/components/schemas/targetPublicKey"},"expirationSeconds":{"$ref":"#/components/schemas/expirationSeconds"}}}}}},"responses":{"200":{"description":"Wallet creation response.","content":{"application/json":{"schema":{"type":"object","properties":{"orgId":{"$ref":"#/components/schemas/orgId"}}}}}}},"operationId":"createAccount"}},"/auth":{"post":{"summary":"Send Auth Email","description":"Send an email to a user with an OTP code (recommended) or magic link (configured via our dashboard), enabling the user to authenticate and access their Smart Wallet via a secure, email-based verification flow. Customize the emailâ€™s appearance and content (e.g., authentication method, branding, messaging) through the [Alchemy Dashboard](https://dashboard.alchemy.com/accounts) to match your applicationâ€™s look and feel.\n","tags":["Wallets API Endpoints"],"security":[{"apiKey":[]}],"x-readme":{"samples-languages":["javascript","curl","python","go"]},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"email":{"$ref":"#/components/schemas/email","description":"The email address of the user requesting access. This is where the authentication email, containing the magic link, will be sent."},"targetPublicKey":{"$ref":"#/components/schemas/targetPublicKey"},"expirationSeconds":{"$ref":"#/components/schemas/expirationSeconds"}}}}}},"responses":{"200":{"description":"Authentication email sent successfully.","content":{"application/json":{"schema":{"type":"object","properties":{"orgId":{"$ref":"#/components/schemas/orgId","description":"The organization ID associated with the user and the application, facilitating the authentication process within the context of the user's application."}}}}}}},"operationId":"sendEmailAuth"}},"/whoami":{"post":{"summary":"Authenticate User","description":"Authenticate a user to retrieve their identity and wallet details, enabling access to their Smart Wallet. This endpoint verifies user identity via a stamped whoami request (generated by email or passkey authentication with the SDK), authorizing them to send User Operations as a smart account owner or send transactions as a standalone EOA on Ethereum or Solana.\nIf you are using the SDK to authenticate the user on the client-side, this is ideal for server-side verification. Use the SDKâ€™s stampWhoami method on the client to generate a stamped request, then pass it to your server to call this API and confirm the userâ€™s identity securely on your backend.\n","tags":["Wallets API Endpoints"],"security":[{"apiKey":[]}],"x-readme":{"samples-languages":["javascript","curl","python","go"]},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"stampedRequest":{"$ref":"#/components/schemas/SignedTurnkeyRequest","description":"A stamped [Turnkey Whoami Request](https://docs.turnkey.com/api#tag/Sessions/operation/GetWhoami). Follow [this guide](https://docs.alchemy.com/reference/how-to-stamp-requests) for stamping.\n"}}}}}},"responses":{"200":{"description":"User authentication successful.","content":{"application/json":{"schema":{"type":"object","properties":{"email":{"$ref":"#/components/schemas/email","description":"The authenticated user's email address."},"userId":{"type":"string","description":"A unique identifier for the authenticated user."},"orgId":{"$ref":"#/components/schemas/orgId","description":"The organization ID associated with the authenticated user's account."},"address":{"type":"string","description":"The Ethereum address of the user's signer. Essential for executing transactions and managing the wallet."},"solanaAddress":{"type":"string","description":"The Solana address of the user's signer. Required for Solana transactions and wallet management."}}}}}}},"operationId":"authUser"}},"/lookup":{"post":{"summary":"Get User","description":"Query the existence of a userâ€™s wallet using their email address. This endpoint checks if a wallet is associated with the provided email, returning relevant user or wallet details if found. Itâ€™s useful for verifying user registration or wallet status in your application.\n","tags":["Wallets API Endpoints"],"security":[{"apiKey":[]}],"x-readme":{"samples-languages":["javascript","curl","python","go"]},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"email":{"$ref":"#/components/schemas/email","description":"The email address of the user to look up. This is used to verify if an associated account exists within the system."}}}}}},"responses":{"200":{"description":"Query successful. Returns organization ID if an account exists for the provided email address.","content":{"application/json":{"schema":{"type":"object","properties":{"orgId":{"$ref":"#/components/schemas/orgId","description":"The organization ID associated with the user. This ID is returned if an account exists for the given email address. If no account is found, this value will be null. The response is intentionally limited to this information to protect user privacy and security.\n"}}}}}}},"operationId":"getUser"}},"/sign-payload":{"post":{"summary":"Sign Message","description":"Sign arbitrary payloads using the authenticated userâ€™s wallet on Ethereum and Solana. The payload to be signed should be included within the body of a [stamped request](https://docs.alchemy.com/reference/how-to-stamp-requests), ensuring the integrity and authenticity of the message to be signed. This endpoint generates a verified signature from the userâ€™s wallet, essential for executing transactions and interactions on the blockchain that require verified signatures from the user's wallet.\n","security":[{"apiKey":[]}],"x-readme":{"samples-languages":["javascript","curl","python","go"]},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"stampedRequest":{"$ref":"#/components/schemas/SignedTurnkeyRequest","description":"A stamped request that includes the payload to be signed. See above for request formatting and [this guide](https://docs.alchemy.com/reference/how-to-stamp-requests) for stamping.\n"}}}}}},"responses":{"200":{"description":"Message signing successful.","content":{"application/json":{"schema":{"type":"object","properties":{"signature":{"type":"string","description":"The signature generated for the specified payload."}}}}}}},"operationId":"signMessage"}},"/account/authenticator":{"post":{"summary":"Register New Authenticator","description":"Register a new authenticator (i.e. a passkey) with a userâ€™s wallet to enhance security and enable multi-factor authentication across devices. Currently, this only support adding a new passkey (e.g. WebAuthN) as an additional authenticator.\n","tags":["Wallets API Endpoints"],"security":[{"apiKey":[]}],"x-readme":{"samples-languages":["javascript","curl","python","go"]},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"stampedAddAuthenticatorRequest":{"$ref":"#/components/schemas/SignedTurnkeyRequest","description":"A stamped request specifying the new authenticator (e.g., a passkey) to register with the userâ€™s wallet. This JSON object ensures the requestâ€™s integrity and authenticity. This request format must match the [Turnkey's Create Authenticators Request Body](https://docs.turnkey.com/api#tag/Authenticators/operation/CreateAuthenticators). See [this guide](https://docs.alchemy.com/reference/how-to-stamp-requests) for stamping.\n"}}}}}},"responses":{"200":{"description":"Authenticator registration successful.","content":{"application/json":{"schema":{"type":"object","properties":{"message":{"type":"string","example":"ok","description":"A confirmation message indicating the successful registration of the new authenticator."}}}}}}},"operationId":"registerNewAuthenticator"}}},"components":{"securitySchemes":{"apiKey":{"type":"apiKey","name":"Authorization","in":"header","description":"An API key that will be supplied in a named header.","x-default":"Bearer API_KEY"}},"schemas":{"apiKey":{"name":"apiKey","in":"path","schema":{"type":"string","default":"docs-demo","description":"<style>\n  .custom-style {\n    color: #048FF4;\n  }\n</style>\nFor higher throughput, <span class=\"custom-style\"><a href=\"https://alchemy.com/?a=docs-demo\" target=\"_blank\">create your own API key</a></span>\n"},"required":true},"email":{"name":"email","description":"The email of the user that is signing in","in":"query","schema":{"type":"string"},"required":true},"expirationSeconds":{"name":"expirationSeconds","description":"Optional. Specifies the duration of the login session in seconds. After this period, the user has to re-login to refresh their session. The default value is 900 seconds (15 minutes).","schema":{"type":"string"},"required":false},"targetPublicKey":{"name":"targetPublicKey","description":"The public key of the key pair used to encrypt the walletâ€™s verified credential. This ensures secure delivery of the walletâ€™s authentication to your client. See verifying logic for generating and using this.\n","schema":{"type":"string"},"required":false},"orgId":{"name":"orgId","description":"The organization ID associated with the user and application, enabling the management of Smart Wallets.","schema":{"type":"string"}},"SignedTurnkeyRequest":{"type":"object","description":"The signed request object containing session information. It is used to ensure the integrity and authenticity of requests to our API. Learn how to [stamp requests](https://docs.alchemy.com/reference/how-to-stamp-requests).\n","required":true,"properties":{"url":{"type":"string","description":"Generated by the turnkey client, but will be ignored on our end.","required":true},"body":{"type":"string","description":"JSON stringified request body.","required":true},"stamp":{"type":"object","description":"A JSON-encoded object containing stamping information. See [stamping guide](https://docs.alchemy.com/reference/how-to-stamp-requests).\n","required":true,"properties":{"stampHeaderName":{"type":"string","description":"For WebAuthN based stamps, this should be `X-Stamp-Webauthn`. For all other stamps, this should be `X-Stamp`.\n","required":true},"stampHeaderValue":{"type":"string","description":"The [stamp](https://docs.alchemy.com/reference/how-to-stamp-requests) over the request body. See the [Turnkey Stamps Documentation](https://docs.turnkey.com/api-design/stamps) for information on the format of this value.\n","required":true}}}}}}},"x-readme":{"explorer-enabled":true,"proxy-enabled":true}}